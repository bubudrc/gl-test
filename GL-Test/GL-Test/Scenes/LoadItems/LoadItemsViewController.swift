//
//  LoadItemsViewController.swift
//  GL-Test
//
//  Created by Marcelo Perretta on 06/03/2018.
//  Copyright (c) 2018 MAWAPE. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoadItemsDisplayLogic: class
{
  func displayItems(viewModel: LoadItems.Data.ViewModel)
}

class LoadItemsViewController: UITableViewController, LoadItemsDisplayLogic
{
  var interactor: LoadItemsBusinessLogic?
  var router: (NSObjectProtocol & LoadItemsRoutingLogic & LoadItemsDataPassing)?

    let cellIdentifier = "itemCellIdentifier"
    var allItems: [Item] = [] {
        didSet {
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoadItemsInteractor()
    let presenter = LoadItemsPresenter()
    let router = LoadItemsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    tableView.rowHeight = UITableViewAutomaticDimension
    tableView.estimatedRowHeight = 64
    tableView.tableFooterView = UIView()
    
    let request = LoadItems.Data.Request()
    interactor?.loadItems(request: request)
  }
  
  // MARK: Do something
  
  func displayItems(viewModel: LoadItems.Data.ViewModel)
  {
    allItems = viewModel.items
  }
    
    // MARK: UITableViewDatasource
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return allItems.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? LoadItemsTableViewCell else {
            return UITableViewCell()
        }
        
        let itemData = allItems[indexPath.row]
        cell.itemCell = itemData
        
        return cell
    }
    
    // MARK: UITableViewDelegate
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        let itemData = allItems[indexPath.row]
        
        router?.navigateToItemDetail(withItem: itemData)
        
        tableView.deselectRow(at: indexPath, animated: true)
    }
}
